[package]
authors = ["Alex Huszagh <ahuszagh@gmail.com>"]
autobenches = false
categories = ["parsing", "encoding", "no-std", "value-formatting"]
description = "Lexical, to- and from-string conversion routines."
documentation = "https://docs.rs/lexical"
edition = "2018"
keywords = ["parsing", "lexical", "encoding", "no_std"]
license = "MIT/Apache-2.0"
name = "lexical"
readme = "README.md"
repository = "https://github.com/Alexhuszagh/rust-lexical"
version = "6.0.0"
exclude = [
    "assets/*",
    "ci/*",
    "data/*",
    "benches/*",
    "bin/*",
    "lexical-benchmark/*",
    "lexical-capi/*",
    "lexical-codegen/*",
    "lexical-derive/*",
    "lexical-test/*",
]

[badges]
travis-ci = { repository = "Alexhuszagh/rust-lexical" }

[dependencies]
cfg-if = "1.0"
lexical-core = { path = "lexical-core", version = "^0.8.0", default-features = false }
# The following are only required for comprehensive float unittests.
# IE, internal testing only:
rand = { version = "0.4", optional = true }
serde = { version = "1.0", optional = true }
serde_derive = { version = "1.0", optional = true }
toml = { version = "0.5", optional = true }

[dev-dependencies]
approx = "0.4.0"
criterion = "0.3"
dtoa = "0.4"
ryu_impl = { version = "1.0", package = "ryu" }
itoa_impl = { version = "0.4", features = ["i128"], package = "itoa" }
lazy_static = "1"

[features]
default = [
    # Sub-crates.
    "parse_floats",
    "parse_integers",
    "write_floats",
    "write_integers",
    # Default features.
    "lemire",
    "no_alloc",
    "ryu",
    "std"
]

# SUBCRATES
# ---------
# Enable the float parser.
parse_floats = ["lexical-core/parse_floats"]
# Enable the integer parser.
parse_integers = ["lexical-core/parse_integers"]
# Enable the float writer.
write_floats = ["lexical-core/write_floats"]
# Enable the integer writer.
write_integers = ["lexical-core/write_integers"]

# FEATURES
# --------
# Do not use the system allocator, if possible.
# Note that setting will be overriden for f128 and radix with atof.
no_alloc = ["lexical-core/no_alloc"]
# Add support for different float string formats.
format = ["lexical-core/format"]
# Add support for parsing and writing power-of-two float and integer strings.
power_of_two = ["lexical-core/power_of_two"]
# Add support for parsing and writing non-decimal float and integer strings.
radix = ["lexical-core/radix"]
# Allow custom rounding schemes, at the cost of slower performance.
rounding = ["lexical-core/rounding"]
# Use the optimized Ryu implementation.
ryu = ["lexical-core/ryu"]
# Use the `std` library.
std = ["lexical-core/std"]
# Use the Eisel-Lemire algorithm, which parses floats faster for
# the vast majority of cases, however, it requires additional
# overhead and is slower for denormal floats and close-to-halfway
# cases.
lemire = ["lexical-core/lemire"]

# REMOVED ALGORITHMS
# ------------------
# Algorithms that exist solely because they are useful for demonstration,
# purposes, or algorithm design, but not performant enough for current use.

# Use algorithm M, which generates digits by scaling the numerator
# and denominator into the range `[2^52, 2^53)`.
algorithm_m = ["lexical-core/algorithm_m"]

# INTERNAL
# --------
# Undocumented. Disable quickcheck for older Rustc versions.
property_tests = ["lexical-core/property_tests"]
# Build the comprehensive float parsing tests.
# Testing only.
comprehensive_float_test = ["rand/std", "serde/std", "serde_derive", "std", "toml"]

# BINARIES
# --------

# Special testing binaries for the runtests.py scripts.
[[bin]]
name = "few_ones"
path = "data/test-parse-random/few_ones.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "huge-pow10"
path = "data/test-parse-random/huge-pow10.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "long-fractions"
path = "data/test-parse-random/long-fractions.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "many-digits"
path = "data/test-parse-random/many-digits.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "rand-f64"
path = "data/test-parse-random/rand-f64.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "short-decimals"
path = "data/test-parse-random/short-decimals.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "subnorm"
path = "data/test-parse-random/subnorm.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "tiny-pow10"
path = "data/test-parse-random/tiny-pow10.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "u32-small"
path = "data/test-parse-random/u32-small.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "u64-pow2"
path = "data/test-parse-random/u64-pow2.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "test-parse-unittests"
path = "data/test-parse-unittests/main.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "test-parse-golang"
path = "data/test-parse-golang/main.rs"
required-features = ["comprehensive_float_test"]

# Simple binaries to test the binary size of lexical functions.
[[bin]]
name = "simple_lexical_example"
path = "bin/simple_lexical_example.rs"
required-features = ["parse_floats"]

[[bin]]
name = "simple_parse_example"
path = "bin/simple_parse_example.rs"
required-features = ["parse_floats"]

# BENCHMARKS
# ----------

[[bench]]
name = "atof"
path = "benches/atof.rs"
harness = false

[[bench]]
name = "atof_malicious"
path = "benches/atof_malicious.rs"
harness = false

[[bench]]
name = "atof_real"
path = "benches/atof_real.rs"
harness = false

[[bench]]
name = "atoi"
path = "benches/atoi.rs"
harness = false

[[bench]]
name = "itoa"
path = "benches/itoa.rs"
harness = false

[[bench]]
name = "ftoa"
path = "benches/ftoa.rs"
harness = false

# PROFILES
# --------

[profile.dev]
opt-level = 0
debug = true
lto = false

[profile.release]
opt-level = 3
debug = false
debug-assertions = false
lto = true

[profile.bench]
opt-level = 3
debug = false
debug-assertions = false
lto = true
