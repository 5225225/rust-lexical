[package]
authors = ["Alex Huszagh <ahuszagh@gmail.com>"]
autobenches = false
categories = ["parsing", "encoding", "no-std"]
description = "Lexical, to- and from-string conversion routines."
documentation = "https://docs.rs/lexical"
keywords = ["parsing", "lexical", "encoding", "no_std"]
license = "MIT/Apache-2.0"
name = "lexical"
readme = "README.md"
repository = "https://github.com/Alexhuszagh/rust-lexical"
version = "1.8.2"
exclude = [
    "data/*",
    "benches/*",
    "lexical-benchmark/*",
]

[badges]
travis-ci = { repository = "Alexhuszagh/rust-lexical" }

[dependencies]
cfg-if = "0.1"
lexical-core = { path = "lexical-core", version = "0.1" }
# The following are only required for comprehensive float unittests.
# IE, internal testing only:
rand = { version = "0.4", optional = true }
serde = { version = "1.0", optional = true }
serde_derive = { version = "1.0", optional = true }
toml = { version = "0.4", optional = true }

[dev-dependencies]
approx = "0.3.0"
bencher = "0.1.5"
dtoa = "0.4"
itoa = "0.4"
lazy_static = "1"
ryu_impl = { version = "0.2", package = "ryu" }

[features]
default = ["bhcmp", "ryu", "std"]
# Use algorithm M, which requires a system allocator.
algorithm_m = ["correct", "lexical-core/algorithm_m"]
# Use `b+h` comparison, which requires a system allocator with radix.
# This is preferred, as it is the fastest algorithm in lexical.
bhcmp = ["correct", "lexical-core/bhcmp"]
# Use the correct atof parser.
correct = ["lexical-core/correct"]
# Use the optimized Grisu3 implementation from dtoa (not recommended).
grisu3 = ["lexical-core/grisu3"]
# Add support for [parsing non-decimal float and integer strings.
radix = ["lexical-core/radix"]
# Use the optimized Ryu implementation.
ryu = ["lexical-core/ryu"]
# Use the `std` library.
std = ["lexical-core/std"]
# Trim a trailing ".0" from an exported float string, and represent -0.0 as "0".
trim_floats = ["lexical-core/trim_floats"]
# Build the comprehensive float parsing tests.
# Testing only.
comprehensive_float_test = ["rand/std", "serde/std", "serde_derive", "std", "toml"]

# Binaries
# Special testing binaries for the runtests.py scripts.

[[bin]]
name = "few_ones"
path = "data/test-float-parse/few_ones.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "huge-pow10"
path = "data/test-float-parse/huge-pow10.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "long-fractions"
path = "data/test-float-parse/long-fractions.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "many-digits"
path = "data/test-float-parse/many-digits.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "rand-f64"
path = "data/test-float-parse/rand-f64.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "short-decimals"
path = "data/test-float-parse/short-decimals.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "subnorm"
path = "data/test-float-parse/subnorm.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "tiny-pow10"
path = "data/test-float-parse/tiny-pow10.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "u32-small"
path = "data/test-float-parse/u32-small.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "u64-pow2"
path = "data/test-float-parse/u64-pow2.rs"
required-features = ["comprehensive_float_test"]

[[bin]]
name = "test-strtod"
path = "data/test-strtod/main.rs"
required-features = ["comprehensive_float_test"]

# Benchmarks

[[bench]]
name = "algom"
harness = false
required-features = ["algorithm_m"]

[[bench]]
name = "atof"
harness = false

[[bench]]
name = "atof_malicious"
harness = false

[[bench]]
name = "atoi"
harness = false

[[bench]]
name = "bigcomp"
harness = false

[[bench]]
name = "itoa"
harness = false

[[bench]]
name = "ftoa"
harness = false

[profile.dev]
opt-level = 0
debug = true
lto = false

[profile.release]
opt-level = 3
debug = false
debug-assertions = false
lto = true

[profile.bench]
opt-level = 3
debug = false
debug-assertions = false
lto = true
