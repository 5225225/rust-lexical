[package]
authors = ["Alex Huszagh <ahuszagh@gmail.com>"]
autobenches = false
categories = ["parsing", "encoding", "no-std", "value-formatting"]
description = "Lexical, to- and from-string conversion routines."
documentation = "https://docs.rs/lexical-core"
edition = "2018"
keywords = ["parsing", "lexical", "encoding", "no_std"]
license = "MIT/Apache-2.0"
name = "lexical-core"
readme = "README.md"
repository = "https://github.com/Alexhuszagh/rust-lexical/tree/master/lexical-core"
version = "0.8.0"
build = "build.rs"
exclude = [
    "fuzz/*",
    "scripts/*",
    "ffi/*",
]

[badges]
travis-ci = { repository = "Alexhuszagh/rust-lexical" }

[dependencies]
bitflags = "1.2"
cfg-if = "1.0"
libm = "0.2.1"
static_assertions = "1"
arrayvec = { version = "0.5", optional = true, default-features = false, features = ["array-sizes-33-128"] }
# Optimized Ryu implementation, the fastest correct algorithm.
ryu = { version = "1.0", optional = true }
# Enable quickcheck for newer Rustc versions.
quickcheck = { version = "1.0.3", optional = true }
# Enable proptest for newer Rustc versions.
proptest = { version = "0.10.1", optional = true }

[build-dependencies]
version_check = "0.9"

[dev-dependencies]
approx = "0.4.0"

[features]
default = ["lemire", "no_alloc", "ryu", "std"]

# FEATURES
# --------
# Do not use the system allocator, if possible.
# Note that setting will be overriden for f128 and radix with atof.
no_alloc = ["arrayvec"]
# Add support for different float string formats.
format = []
# Add support for parsing and writing power-of-two float and integer strings.
power_of_two = []
# Add support for parsing and writing non-decimal float and integer strings.
radix = ["power_of_two"]
# Allow custom rounding schemes, at the cost of slower performance.
rounding = []
# Use the `std` library.
std = []
# Use the Eisel-Lemire algorithm, which parses floats faster for
# the vast majority of cases, however, it requires additional
# overhead and is slower for denormal floats and close-to-halfway
# cases.
lemire = []

# REMOVED ALGORITHMS
# ------------------
# Algorithms that exist solely because they are useful for demonstration,
# purposes, or algorithm design, but not performant enough for current use.

# Use algorithm M, which generates digits by scaling the numerator
# and denominator into the range `[2^52, 2^53)`.
algorithm_m = []

# INTERNAL
# --------
# Undocumented. Disable quickcheck for older Rustc versions.
property_tests = ["std", "quickcheck", "proptest"]

# Use heavy optimizations for release builds, and make our panics to detect
# internal logic errors safe for FFI, via abort.
[profile.dev]
opt-level = 0
debug = true
lto = false

[profile.release]
opt-level = 3
debug = false
debug-assertions = false
lto = true
